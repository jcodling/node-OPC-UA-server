// --------- This code has been automatically generated !!! Wed Jul 22 2015 13:15:46 GMT+0000 (UTC)
/**
 * @module opcua.address_space.types
 */
var doDebug = false;
var assert = require("better-assert");
var util = require("util");
var _  = require("underscore");
var makeNodeId = require("../lib/datamodel/nodeid").makeNodeId;
var schema_helpers =  require("../lib/misc/factories_schema_helpers");
var extract_all_fields                       = schema_helpers.extract_all_fields;
var resolve_schema_field_types               = schema_helpers.resolve_schema_field_types;
var initialize_field                         = schema_helpers.initialize_field;
var initialize_field_array                   = schema_helpers.initialize_field_array;
var check_options_correctness_against_schema = schema_helpers.check_options_correctness_against_schema;
var _defaultTypeMap = require("../lib/misc/factories_builtin_types")._defaultTypeMap;
var ec= require("../lib/misc/encode_decode");
var encodeArray= ec.encodeArray;
var decodeArray= ec.decodeArray;
var makeExpandedNodeId= ec.makeExpandedNodeId;
var generate_new_id = require("../lib/misc/factories").generate_new_id;
var _enumerations = require("../lib/misc/factories_enumerations")._private._enumerations;
var schema = require("../schemas/HistoryReadResult_schema").HistoryReadResult_Schema;
var BaseUAObject = require("../lib/misc/factories_baseobject").BaseUAObject;

/**
 * 
 * @class HistoryReadResult
 * @constructor
 * @extends BaseUAObject
 * @param  options {Object}
 * @param  [options.StatusCode] {StatusCode} 
 * @param  [options.ContinuationPoint] {ByteString} 
 * @param  [options.HistoryData] {ExtensionObject} 
 */
function HistoryReadResult(options)
{
    options = options || {};
    /* istanbul ignore next */
    if (doDebug) { check_options_correctness_against_schema(this,schema,options); }
    var self = this;
    assert(this instanceof BaseUAObject); //  ' keyword "new" is required for constructor call')
    resolve_schema_field_types(schema);

    BaseUAObject.call(this,options);

    /**
      * 
      * @property StatusCode
      * @type {StatusCode}
      */
    self.StatusCode = initialize_field(schema.fields[0], options.StatusCode);

    /**
      * 
      * @property ContinuationPoint
      * @type {ByteString}
      */
    self.ContinuationPoint = initialize_field(schema.fields[1], options.ContinuationPoint);

    /**
      * 
      * @property HistoryData
      * @type {ExtensionObject}
      */
    self.HistoryData = initialize_field(schema.fields[2], options.HistoryData);

   // Object.preventExtensions(self);
}
util.inherits(HistoryReadResult,BaseUAObject);
HistoryReadResult.prototype.encodingDefaultBinary =makeExpandedNodeId(640,0);
HistoryReadResult.prototype._schema = schema;

var encode_StatusCode = _defaultTypeMap.StatusCode.encode;
var decode_StatusCode = _defaultTypeMap.StatusCode.decode;
var encode_ByteString = _defaultTypeMap.ByteString.encode;
var decode_ByteString = _defaultTypeMap.ByteString.decode;
var encode_ExtensionObject = _defaultTypeMap.ExtensionObject.encode;
var decode_ExtensionObject = _defaultTypeMap.ExtensionObject.decode;
/**
 * encode the object into a binary stream
 * @method encode
 *
 * @param stream {BinaryStream} 
 */
HistoryReadResult.prototype.encode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.encode.call(this,stream,options);
    encode_StatusCode(this.StatusCode,stream);
    encode_ByteString(this.ContinuationPoint,stream);
    encode_ExtensionObject(this.HistoryData,stream);
};
HistoryReadResult.prototype.decode = function(stream,options) {
    // call base class implementation first
    BaseUAObject.prototype.decode.call(this,stream,options);
    this.StatusCode = decode_StatusCode(stream,options);
    this.ContinuationPoint = decode_ByteString(stream,options);
    this.HistoryData = decode_ExtensionObject(stream,options);
};
HistoryReadResult.possibleFields = function() {
    return [
        "StatusCode",
         "ContinuationPoint",
         "HistoryData"
    ];
}();


exports.HistoryReadResult = HistoryReadResult;
var register_class_definition = require("../lib/misc/factories_factories").register_class_definition;
register_class_definition("HistoryReadResult",HistoryReadResult);